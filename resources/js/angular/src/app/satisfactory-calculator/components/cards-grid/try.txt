<!-- <ng-container *ngIf="cell; else emptyCell">

        <div class="placeholder" *cdkDragPlaceholder>Placeholder</div>

      <div class="cell-content">{{ cell }}</div>
    </ng-container>

    <ng-template #emptyCell>
      <div class="empty-cell"></div>
    </ng-template> -->

<div
  cdkDropList
  class="example-list"
  (cdkDropListDropped)="drop($event)"
  cdkDropList
  [cdkDropListSortPredicate]="sortPredicate"
  [cdkDropListData]="cells"
>
  <div
    class="example-box"
    *ngFor="let cell of cells; let i = index"
    cdkDrag
    [cdkDragData]="cell"
    (cdkDragStarted)="dragStarted(i)"
    (cdkDragEnded)="dragEnded()"
    [cdkDragDisabled]="!canDrag(cell)"
  >
    <ng-container *ngIf="i === draggedItemIndex; else preview">
      Start
    </ng-container>
    <!-- Placeholder for the item being dragged -->
    <ng-template #preview>
      <ng-container *ngIf="i === dropPreviewIndex; else content">
        LOL
      </ng-container>
    </ng-template>

    <!-- Actual cell content or empty cell -->
    <ng-template #content>
      <ng-container *ngIf="cell !== null; else emptyCell">
        <!-- Actual cell content -->
        <div class="cell-content">{{ cell }}</div>
      </ng-container>
    </ng-template>

    <!-- Fallback for empty cells -->
    <ng-template #emptyCell>
      <div class="empty-cell">Empty</div>
    </ng-template>
  </div>
</div>



import { Component, ChangeDetectorRef } from '@angular/core';

import {
  CdkDragDrop,
  CdkDrag,
  CdkDropList,
  CdkDragEnd,
  moveItemInArray,
} from '@angular/cdk/drag-drop';
import { CommonModule } from '@angular/common';

/**
 * @title Drag&Drop horizontal sorting
 */
@Component({
  selector: 'cdk-drag-drop-horizontal-sorting-example',
  templateUrl: 'cdk-drag-drop-horizontal-sorting-example.html',
  styleUrl: 'cdk-drag-drop-horizontal-sorting-example.css',
  standalone: true,
  imports: [CdkDropList, CdkDrag, CommonModule],
})
export class CdkDragDropHorizontalSortingExample {
  constructor(private cdr: ChangeDetectorRef) {}
  cells: (string | null)[] = ['Item 1', 'Item 2', null, 'Item 3', null]; // Example cells
  draggedItemIndex: number | null = null; // Tracks the currently dragged item's index
  dropPreviewIndex: number | null = null; // Tracks the index where the drop preview should be shown

  // Determines whether an item can be dragged or not
  canDrag(cell: string | null): boolean {
    return cell !== null; // Only non-null items are draggable
  }

  // Triggered when drag starts
  dragStarted(index: number) {
    console.log(this.cells);
    this.draggedItemIndex = index; // Track the index of the dragged item
    this.cdr.detectChanges();
  }

  // Triggered when drag ends
  dragEnded() {
    this.dropPreviewIndex = null; // Reset the drop preview
    this.draggedItemIndex = null; // Clear the index after dragging ends
  }

  // sortPredicate(index: number, item: CdkDrag<number>) {
  //   console.log(index);
  //   console.log(this.cells);
  //   return this.cells[index] === null;
  // }

  sortPredicate = (index: number, item: CdkDrag<number>) => {
    const canDrop =
      this.cells[index] === null || this.draggedItemIndex === index;
    if (canDrop) {
      this.dropPreviewIndex = index; // Set the drop preview to this index
      console.log(this.dropPreviewIndex);
      this.cdr.detectChanges();
    }
    return canDrop;
  };

  // Drop event handler to swap items or move them into empty cells
  drop(event: CdkDragDrop<(string | null)[]>) {
    console.log(event);
    console.log(this.cells);
    const previousIndex = event.previousIndex;
    const currentIndex = event.currentIndex;

    // Check if the destination is empty or the same item
    if (this.cells[currentIndex] === null) {
      // Move the dragged item to the new index and clear the old one
      this.cells[currentIndex] = this.cells[previousIndex];
      this.cells[previousIndex] = null;
    }
    this.dropPreviewIndex = null; // Clear the drop preview after dropping
  }
}

/**  Copyright 2024 Google LLC. All Rights Reserved.
    Use of this source code is governed by an MIT-style license that
    can be found in the LICENSE file at https://angular.io/license */





.example-list {
  width: 500px;
  max-width: 100%;
  border: solid 1px #ccc;
  min-height: 60px;
  display: block;
  background: white;
  border-radius: 4px;
  overflow: hidden;
}

.example-box {
  padding: 20px 10px;
  border-bottom: solid 1px #ccc;
  color: rgba(0, 0, 0, 0.87);
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
  cursor: move;
  background: white;
  font-size: 14px;
}

.cdk-drag-preview {
  box-sizing: border-box;
  border-radius: 4px;
  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
              0 8px 10px 1px rgba(0, 0, 0, 0.14),
              0 3px 14px 2px rgba(0, 0, 0, 0.12);
}

.cdk-drag-animating {
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.example-box:last-child {
  border: none;
}

.example-list.cdk-drop-list-dragging .example-box:not(.cdk-drag-placeholder) {
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.example-custom-placeholder {
  background: #ccc;
  border: dotted 3px #999;
  min-height: 60px;
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}
